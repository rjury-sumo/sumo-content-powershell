# auto generated by srcgen apps 11/17/2020 2:22:04 PM 


<#
    .DESCRIPTION
    /v1/apps,get

    .PARAMETER sumo_session
    Specify a session, defaults to $sumo_session

    .OUTPUTS
    PSCustomObject.
#>


function Get-Apps {

    Param(
         [parameter()][SumoAPISession]$sumo_session = $sumo_session
     )
     return (invoke-sumo -path "apps" -method GET -session $sumo_session -v 'v1')
 }
 
 <#
     .DESCRIPTION
     /v1/apps/install/{jobId}/status,get
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER jobId
     jobId for get
 
     .EXAMPLE
     Get-AppInstallStatusById -jobId 87CDEA205F005A01

     .OUTPUTS
     PSCustomObject. with properties status, statusMessage,error
 #>
 
 
 function Get-AppInstallStatusById {
 
    Param(
         [parameter()][SumoAPISession]$sumo_session = $sumo_session,
         [parameter(mandatory=$True)]$jobId
     )
     return (invoke-sumo -path "apps/install/$jobId/status" -method GET -session $sumo_session -v 'v1')
 }
 
 <#
     .DESCRIPTION
     /v1/apps/{uuid},get
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER uuid
     uuid for get

     .EXAMPLE
     Get-AppById -uuid deadca25-5fa9-4620-812d-dced60b59ff8
 
     .OUTPUTS
     PSCustomObject.
 #>
 
 
 function Get-AppById {
 
    Param(
         [parameter()][SumoAPISession]$sumo_session = $sumo_session,
         [parameter(mandatory=$True)]$uuid
     )
     return (invoke-sumo -path "apps/$uuid" -method GET -session $sumo_session -v 'v1')
 }
 
 <#
     .DESCRIPTION
     /v1/apps/{uuid}/install,post
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER uuid
     uuid for post
 
     .PARAMETER body
     PSCustomObject body for post
 
     .OUTPUTS
     PSCustomObject.
 #>
 
 
<#
    .DESCRIPTION
    /v1/apps/{uuid}/install,post

    .PARAMETER sumo_session
    Specify a session, defaults to $sumo_session

    .PARAMETER uuid
    uuid for post

    .PARAMETER body
    PSCustomObject body for post

    .OUTPUTS
    PSCustomObject.
#>

function New-AppInstallById {

    Param(
         [parameter()][SumoAPISession]$sumo_session = $sumo_session,
         [parameter(mandatory=$True)]$uuid,
         [parameter(mandatory=$True)]$body
     )
     return (invoke-sumo -path "apps/$uuid/install" -method POST -session $sumo_session -v 'v1' -body $body )
 }
 
##################################  NON api-gen code ##################################################
<#
    .DESCRIPTION
    /v1/apps/{uuid}/install,post
    Starts a app install job by supplying params rather than a -body via New-AppInstallById 
    To see what apps can be installed use Get-apps and Get-appbyid

    .PARAMETER sumo_session
    Specify a session, defaults to $sumo_session

    .PARAMETER uuid
    uuid of the app.

    .PARAMETER name
    optional name, defaults to app name defined by uuid

    .PARAMETER description
    app description, defaults to appManifest.description defined by uuid

    .PARAMETER destinationFolderId
    destinationFolderId, defealts to personal folder

    .PARAMETER dataSourceValues
    required parameters for the app such as @{'Log data source' = '_sourcecategory=*'}

    .EXAMPLE
    Install the log analysis quickstart to your personal folder
    Install-SumoApp -uuid deadca25-5fa9-4620-812d-dced60b59ff8 -dataSourceValues @{'Log data source' = '_sourcecategory=*' }

    .OUTPUTS
    PSCustomObject containing ID of install job
#>

function Install-SumoApp {

    Param(
        [parameter()][SumoAPISession]$sumo_session = $sumo_session,
        [parameter(mandatory = $True)]$uuid,
        [parameter(mandatory = $false)]$name,
        [parameter(mandatory = $false)]$description,
        [parameter(mandatory = $false)]$destinationFolderId,
        [parameter(mandatory = $false)][hashtable]$dataSourceValues = @{'Log data source' = '_sourcecategory=*' }
    )

    # get the app by uuid first
    $app = (Get-AppById -uuid $uuid)
    if ($app.appDefinition) {
        $appDefinition =$app.appDefinition
        $appDefinition | Add-Member -NotePropertyName description -NotePropertyValue $app.appManifest.description
    } else {
        throw "get-appbyid for app $uuid failed. cannot continue with app install."
    }

    # construct the custom body object
    if ($name) { $appDefinition.name = $name }
    if ($description) { $appDefinition.description = $description }
    if ($dataSourceValues) { $appDefinition | Add-Member -NotePropertyName dataSourceValues -NotePropertyValue $dataSourceValues } 
    if ($destinationFolderId) {
        $appDefinition | Add-Member -NotePropertyName destinationFolderId -NotePropertyValue $destinationFolderId 
    }
    else {
        $appDefinition | Add-Member -NotePropertyName destinationFolderId -NotePropertyValue (Get-PersonalFolder).id
    }

    Write-Verbose ($appDefinition |ConvertTo-Json)
    return (invoke-sumo -path "apps/$uuid/install" -method POST -session $sumo_session -v 'v1' -body $appDefinition )
}
 
 
 
 