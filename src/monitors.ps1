# auto generated by srcgen monitors 11/20/2020 9:17:48 AM 

<#
     .DESCRIPTION
     /v1/monitors,get
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session

     .PARAMETER ids
     a list of ids
 
     .OUTPUTS
     PSCustomObject.

     .EXAMPLE
    Get-MonitorsBulkByIds -ids "0000000000000001,0000000000000002,0000000000000003"
 #>
 
 
 function Get-MonitorsBulkByIds {
 
    Param(
         [parameter()][SumoAPISession]$sumo_session = $sumo_session,
         [parameter(Mandatory=$true)][string]$ids 
     )

    $params =@{'ids' = $ids}

    return (invoke-sumo -path "monitors" -method GET -session $sumo_session -v 'v1' -params $params )
 }


<#
     .DESCRIPTION
     /v1/monitors/path,get
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session

     .PARAMETER path
     montor or monitor folder object path
 
     .OUTPUTS
     PSCustomObject.

     .EXAMPLE
        Get-MonitorsObjectByPath -path '/Monitor/LB Demo Alerts'
 #>
 
 
 function Get-MonitorsObjectByPath {
 
    Param(
         [parameter()][SumoAPISession]$sumo_session = $sumo_session,
         [parameter(Mandatory=$true)][string]$path 
     )

    if ($path) { 
        $params =@{'path' = $path}
    } else {
        $params =@{}
    }

    return (invoke-sumo -path "monitors/path" -method GET -session $sumo_session -v 'v1' -params $params)
 }
 
 <#
     .DESCRIPTION
     /v1/monitors/root,get
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .OUTPUTS
     PSCustomObject.
 #>
 
 
 function Get-MonitorsRoot {
 
    Param(
         [parameter()][SumoAPISession]$sumo_session = $sumo_session
     )
     return (invoke-sumo -path "monitors/root" -method GET -session $sumo_session -v 'v1')
 }
 
 <#
     .DESCRIPTION
     /v1/monitors/search,get
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER query
        Example: "createdBy:000000000000968B Test"
        The search query to find monitor or folder. Below is the list of different filters with examples:

        createdBy : Filter by the user's identifier who created the content. Example: createdBy:000000000000968B.
        createdBefore : Filter by the content objects created before the given timestamp(in milliseconds). Example: createdBefore:1457997222.
        createdAfter : Filter by the content objects created after the given timestamp(in milliseconds). Example: createdAfter:1457997111.
        modifiedBefore : Filter by the content objects modified before the given timestamp(in milliseconds). Example: modifiedBefore:1457997222.
        modifiedAfter : Filter by the content objects modified after the given timestamp(in milliseconds). Example: modifiedAfter:1457997111.
        type : Filter by the type of the content object. Example: type:folder.
        monitorStatus : Filter by the status of the monitor: Normal, Critical, Warning, MissingData, Disabled, AllTriggered. Example: monitorStatus:Normal.
        You can also use multiple filters in one query. For example to search for all content objects created by user with identifier 000000000000968B with creation timestamp after 1457997222 containing the text Test, the query would look like:

        createdBy:000000000000968B createdAfter:1457997222 Test

     .PARAMETER limit
    rows to return max 1000

    .PARAMETER token
    Continuation token to get the next page of results. A page object with the next continuation token is returned in the response body. Subsequent GET requests should specify the continuation token to get the next page of results


     .OUTPUTS
     PSCustomObject.
 #>
 
 
 function Get-MonitorsSearch {
 
    Param(
         [parameter()][SumoAPISession]$sumo_session = $sumo_session,
         [parameter(Mandatory=$true)][string] $query ,
        [parameter()][string] $limit = 100,
         [parameter()][string] $offset = 0
     )

     $params = @{'limit' = $limit; 'token' = $offset; 'query' = $query }

     return (invoke-sumo -path "monitors/search" -method GET -session $sumo_session -v 'v1' -params $params )
 }
 
 <#
     .DESCRIPTION
     /v1/monitors/usageInfo,get
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .OUTPUTS
     PSCustomObject.
 #>
 
 
 function Get-MonitorsUsageInfo {
 
    Param(
         [parameter()][SumoAPISession]$sumo_session = $sumo_session
     )
     return (invoke-sumo -path "monitors/usageInfo" -method GET -session $sumo_session -v 'v1')
 }
 
 <#
     .DESCRIPTION
     /v1/monitors/{id},delete
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER id
     id for delete
 
     .OUTPUTS
     PSCustomObject.
 #>
 
 
 function Remove-MonitorById {
 
    Param(
         [parameter()][SumoAPISession]$sumo_session = $sumo_session,
         [parameter(mandatory=$True)]$id
     )
     return (invoke-sumo -path "monitors/$id" -method DELETE -session $sumo_session -v 'v1')
 }
 
 <#
     .DESCRIPTION
     /v1/monitors/{id},get
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER id
     id for get
 
     .OUTPUTS
     PSCustomObject.
 #>
 
 
 function Get-MonitorsObjectById {
 
    Param(
         [parameter()][SumoAPISession]$sumo_session = $sumo_session,
         [parameter(mandatory=$True)]$id
     )
     return (invoke-sumo -path "monitors/$id" -method GET -session $sumo_session -v 'v1')
 }
 
 <#
     .DESCRIPTION
     /v1/monitors/{id},put
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER id
     id for put
 
     .PARAMETER body
     PSCustomObject body for put
 
     .OUTPUTS
     PSCustomObject.
 #>
 
 
 function Set-MonitorById {
 
    Param(
         [parameter()][SumoAPISession]$sumo_session = $sumo_session,
         [parameter(mandatory=$True)]$id,
         [parameter(mandatory=$True)]$body
     )
     return (invoke-sumo -path "monitors/$id" -method PUT -session $sumo_session -v 'v1' -body $body )
 }
 
 <#
     .DESCRIPTION
     /v1/monitors/{id}/copy,post
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER id
     id for post
 
     .PARAMETER body
     PSCustomObject body for post
 
     .OUTPUTS
     PSCustomObject.
 #>
 
 
 function New-MonitorCopyById {
 
    Param(
         [parameter()][SumoAPISession]$sumo_session = $sumo_session,
         [parameter(mandatory=$True)]$id,
         [parameter(mandatory=$True)]$body
     )
     return (invoke-sumo -path "monitors/$id/copy" -method POST -session $sumo_session -v 'v1' -body $body )
 }
 
 <#
     .DESCRIPTION
     /v1/monitors/{id}/export,get
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER id
     id for get
 
     .OUTPUTS
     PSCustomObject.
 #>
 
 
 function Get-MonitorExportById {
 
    Param(
         [parameter()][SumoAPISession]$sumo_session = $sumo_session,
         [parameter(mandatory=$True)]$id
     )
     return (invoke-sumo -path "monitors/$id/export" -method GET -session $sumo_session -v 'v1')
 }
 
 <#
     .DESCRIPTION
     /v1/monitors/{id}/move,post
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER id
     id for post
 
     .PARAMETER body
     PSCustomObject body for post
 
     .OUTPUTS
     PSCustomObject.
 #>
 
 
 function New-MonitorMoveById {
 
    Param(
         [parameter()][SumoAPISession]$sumo_session = $sumo_session,
         [parameter(mandatory=$True)]$id,
         [parameter(mandatory=$True)]$body
     )
     return (invoke-sumo -path "monitors/$id/move" -method POST -session $sumo_session -v 'v1' -body $body )
 }
 
 <#
     .DESCRIPTION
     /v1/monitors/{id}/path,get
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER id
     id for get
 
     .OUTPUTS
     PSCustomObject.
 #>
 
 
 function Get-MonitorsObjectPathById {
 
    Param(
         [parameter()][SumoAPISession]$sumo_session = $sumo_session,
         [parameter(mandatory=$True)]$id
     )
     return (invoke-sumo -path "monitors/$id/path" -method GET -session $sumo_session -v 'v1')
 }
 
 <#
     .DESCRIPTION
     /v1/monitors/{parentId}/import,post
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER parentId
     parentId for post
 
     .PARAMETER body
     PSCustomObject body for post
 
     .OUTPUTS
     PSCustomObject.
 #>
 
 
 function New-MonitorImportById {
 
    Param(
         [parameter()][SumoAPISession]$sumo_session = $sumo_session,
         [parameter(mandatory=$True)]$parentId,
         [parameter(mandatory=$True)]$body
     )
     return (invoke-sumo -path "monitors/$parentId/import" -method POST -session $sumo_session -v 'v1' -body $body )
 }
 
 