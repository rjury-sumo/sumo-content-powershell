# auto generated by srcgen lookupTables 11/20/2020 9:17:48 AM 
# much custom coding in here too

<#
    .DESCRIPTION
    /v1/lookupTables,post

    .PARAMETER sumo_session
    Specify a session, defaults to $sumo_session

    .PARAMETER parentFolderId
    parentFolderId such as (get-personalfolder).id

    .PARAMETER description
    description

    .PARAMETER columns
    an arraylist of columns in format:
    @("columna","columnb","columnc")
    which defaults to string type for each or:
     @("columna","columnb=boolean","columnc")
    for a non default data type
    
    .PARAMETER primaryKeys
    primaryKeys arrayLIst. @("a")

    .PARAMETER ttl
    optional ttl nteger <int32> [ 0 .. 525600 ]
    0 default is no ttl.

    .PARAMETER sizeLimitAction
    optional StopIncomingMessages or DeleteOldData

    .PARAMETER dryrum
    set to $true to output a table schema rather than create it.

    .OUTPUTS
    PSCustomObject.
#>

function New-LookupTable {

    Param(
        [parameter()][SumoAPISession]$sumo_session = $sumo_session,
        [parameter(mandatory = $True)][string]$name,
        [parameter(mandatory = $True)][string]$parentFolderId,
        [parameter(mandatory = $True)][string]$description,
        [parameter(mandatory = $True)][System.Collections.ArrayList]$columns,
        [parameter(mandatory = $True)][System.Collections.ArrayList]$primaryKeys,
        [parameter(mandatory = $false)][bigint]$ttl = 0,
        [parameter(mandatory = $false)][string]$sizeLimitAction = 'DeleteOldData',
        [parameter(mandatory = $false)][bool]$dryrun = $false
    )

    $newlookup = '{"description":"sample","fields":[{"fieldName":"a","fieldType":"boolean"}],"primaryKeys":["a"],"ttl":100,"sizeLimitAction":"DeleteOldData","name":"SampleLookupTable","parentFolderId":"01234"}' | ConvertFrom-Json -Depth 10

    [System.Collections.ArrayList]$fields = @()
    foreach ($col in $columns) {
        if ($col -match '=') {
            $fieldName=($col -split '=')[0]
            $fieldType=($col -split '=')[1]
        } else {
            $fieldName=$col 
            $fieldType='string'
        }
        $fields += @{"fieldName"=$fieldName;"fieldType" = $fieldType}
    }

    $newlookup.description = $description
    $newlookup.fields = $fields
    $newlookup.primaryKeys = $primaryKeys
    if ($ttl) { $newlookup.ttl = $ttl }
    if ($sizeLimitAction) { $newlookup.sizeLimitAction = $sizeLimitAction }
    $newlookup.name = $name
    $newlookup.parentFolderId = $parentFolderId
    if ($dryrun) {
        return ($newlookup | ConvertTo-Json -Depth 10)
    } else {
        return (invoke-sumo -path "lookupTables" -method POST -session $sumo_session -v 'v1' -body $newlookup )
    }
}
 
<#
     .DESCRIPTION
     /v1/lookupTables/jobs/{jobId}/status,get
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER jobId
     jobId for get
 
     .EXAMPLE
     Get-LookupTableJobsStatusById -jobId 64D4336596622921 -sumo_session $abc

     .OUTPUTS
     PSCustomObject.
 #>
 
 
function Get-LookupTableJobsStatusById {
 
    Param(
        [parameter()][SumoAPISession]$sumo_session = $sumo_session,
        [parameter(mandatory = $True)]$jobId
    )
    return (invoke-sumo -path "lookupTables/jobs/$jobId/status" -method GET -session $sumo_session -v 'v1')
}
 
<#
     .DESCRIPTION
     /v1/lookupTables/{id},delete
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER id
     id for delete
 
     .OUTPUTS
     PSCustomObject.
 #>
 
 
function Remove-LookupTableById {
 
    Param(
        [parameter()][SumoAPISession]$sumo_session = $sumo_session,
        [parameter(mandatory = $True)]$id
    )
    return (invoke-sumo -path "lookupTables/$id" -method DELETE -session $sumo_session -v 'v1')
}
 
<#
     .DESCRIPTION
     /v1/lookupTables/{id},get
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER id
     id for get
 
     .OUTPUTS
     PSCustomObject.
 #>
 
 
function Get-LookupTableById {
 
    Param(
        [parameter()][SumoAPISession]$sumo_session = $sumo_session,
        [parameter(mandatory = $True)]$id
    )
    return (invoke-sumo -path "lookupTables/$id" -method GET -session $sumo_session -v 'v1')
}
 
<#
     .DESCRIPTION
     /v1/lookupTables/{id},put
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER id
     id for put
 
     .PARAMETER body
     PSCustomObject body for put
 
     .OUTPUTS
     PSCustomObject.
 #>
 
 
function Set-LookupTableById {
 
    Param(
        [parameter()][SumoAPISession]$sumo_session = $sumo_session,
        [parameter(mandatory = $True)]$id,
        [parameter(mandatory = $True)]$body
    )
    return (invoke-sumo -path "lookupTables/$id" -method PUT -session $sumo_session -v 'v1' -body $body )
}
 
<#
     .DESCRIPTION
     /v1/lookupTables/{id}/deleteTableRow,put
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER id
     id for put
 
     .PARAMETER body
     PSCustomObject body for put
 
     .OUTPUTS
     PSCustomObject.
 #>
 
 
function Remove-LookupTableRowById {
 
    Param(
        [parameter()][SumoAPISession]$sumo_session = $sumo_session,
        [parameter(mandatory = $True)]$id,
        [parameter(mandatory = $True)]$body
    )
    return (invoke-sumo -path "lookupTables/$id/deleteTableRow" -method PUT -session $sumo_session -v 'v1' -body $body )
}
 
<#
     .DESCRIPTION
     /v1/lookupTables/{id}/row,put
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER id
     id for put
 
     .PARAMETER body
     PSCustomObject body for put
 
     .OUTPUTS
     PSCustomObject.
 #>
 
 
function New-LookupTableRowById {
 
    Param(
        [parameter()][SumoAPISession]$sumo_session = $sumo_session,
        [parameter(mandatory = $True)]$id,
        [parameter(mandatory = $True)]$body
    )
    return (invoke-sumo -path "lookupTables/$id/row" -method PUT -session $sumo_session -v 'v1' -body $body )
}
 
<#
     .DESCRIPTION
     /v1/lookupTables/{id}/truncate,post
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER id
     id for post
 
     .PARAMETER body
     PSCustomObject body for post
 
     .OUTPUTS
     PSCustomObject.
 #>
 
 
function New-LookupTableTruncateById {
 
    Param(
        [parameter()][SumoAPISession]$sumo_session = $sumo_session,
        [parameter(mandatory = $True)]$id,
        [parameter(mandatory = $True)]$body
    )
    return (invoke-sumo -path "lookupTables/$id/truncate" -method POST -session $sumo_session -v 'v1' -body $body )
}
 
<#
     .DESCRIPTION
     /v1/lookupTables/{id}/upload,post
 
     .PARAMETER sumo_session
     Specify a session, defaults to $sumo_session
 
     .PARAMETER id
     id for post
 
     .PARAMETER filepath
     path to csv file. 
 
     .PARAMETER merge
     false default
 
     .PARAMETER fileEncoding
     default "UTF-8"
 
     .EXAMPLE 
     update a lokup table using a csv.
     Set-LookupTableFromCsv -id 0000000001111111 -sumo_session $abc -filepath ./library/lookuptable-example2.csv -Verbose

     .OUTPUTS
     PSCustomObject. ID of job such as 64D4336596622921
 #>
 
 
function Set-LookupTableFromCsv {
 
    Param(
        [parameter()][SumoAPISession]$sumo_session = $sumo_session,
        [parameter(mandatory = $True)]$id,
        [parameter(mandatory = $True)]$filepath,
        [parameter()][string] $merge,
        [parameter()][string] $fileEncoding = "UTF-8"
    )
    if ($merge) {
        $params['merge'] = $merge
    }
    if ($token) {
        $params['fileEncoding'] = $fileEncoding 
    }
 
    $multipartContent = New-MultipartContent -FilePath $filepath
    $customheaders = @{
        'Content-Type' = "multipart/form-data; boundary=$($multipartContent['boundary'])";
        "accept"       = "application/json"
    }

    return (invoke-sumo -path "lookupTables/$id/upload" -method POST -session $sumo_session -v 'v1' -body $multipartContent['multipartBody'] -params $params -headers $customheaders)
}
 
 